[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"599841\">@Jan Range</span> <span class=\"user-mention\" data-user-id=\"598112\">@Philip Durbin</span> I have a user of JÃ¼lich DATA asking for API compatibility. They want to code automations in Python and are wondering about backward compatibility of the backend API. The only breaking change I remember right now is the JSON problem with DV 5.9+ (<a href=\"https://github.com/gdcc/pyDataverse/issues/143\">https://github.com/gdcc/pyDataverse/issues/143</a>) Anything else that comes to mind?</p>",
        "id": 425911070,
        "sender_full_name": "Oliver Bertuch",
        "timestamp": 1710164463
    },
    {
        "content": "<p>That one is be enough that we should probably list it on our new list of breaking changes: <a href=\"https://guides.dataverse.org/en/6.1/api/changelog.html\">https://guides.dataverse.org/en/6.1/api/changelog.html</a></p>",
        "id": 425916691,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1710166080
    },
    {
        "content": "<p>There are a few others listed and of course you can see the preview at <a href=\"https://preview.guides.gdcc.io/en/develop/api/changelog.html\">https://preview.guides.gdcc.io/en/develop/api/changelog.html</a></p>",
        "id": 425916814,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1710166104
    },
    {
        "content": "<p>Thx! Should I create an issue / PR for it?</p>",
        "id": 425932511,
        "sender_full_name": "Oliver Bertuch",
        "timestamp": 1710170265
    },
    {
        "content": "<p>Yes, please!</p>",
        "id": 425935147,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1710170960
    },
    {
        "content": "<p>We started with 6.x stuff but I'd like to backfill as far back as we can.</p>",
        "id": 425935198,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1710170976
    },
    {
        "content": "<p>Ha! Looks like we could use this old issue where you already mentioned the new guide section: <a href=\"https://github.com/IQSS/dataverse/issues/9549\">https://github.com/IQSS/dataverse/issues/9549</a></p>",
        "id": 425944129,
        "sender_full_name": "Oliver Bertuch",
        "timestamp": 1710173320
    },
    {
        "content": "<p>Hmm... Reading the code from the pyDataverse PR and from the Datalad PR how are these changes related???</p>",
        "id": 425944811,
        "sender_full_name": "Oliver Bertuch",
        "timestamp": 1710173501
    },
    {
        "content": "<p>I'm not sure. New Zulip topic? <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 425946959,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1710174089
    },
    {
        "content": "<p>I'm adding a new issue anyway. <a href=\"https://github.com/IQSS/dataverse/issues/10362\">#10362</a></p>",
        "id": 425948681,
        "sender_full_name": "Oliver Bertuch",
        "timestamp": 1710174577
    },
    {
        "content": "<p>Looks great. Much appreciated!</p>",
        "id": 425949526,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1710174802
    },
    {
        "content": "<p>Not sure if this is the right channel, but <span class=\"user-mention\" data-user-id=\"598112\">@Philip Durbin</span> asked me to copy my thoughts from <a href=\"https://github.com/gdcc/pyDataverse/pull/197#issuecomment-2239975488\">pyDataverse#197</a> here, and this is about API compatibility:</p>\n<blockquote>\n<p>In general, the /vX/ path parameter should be used to handle versioning, but it appears that the versions returned by /api/info/version track <a href=\"https://guides.dataverse.org/en/latest/api/changelog.html\">breaking changes</a> much better, as /v1/ seems to have been static from what I can tell, without having too much insights into the project.</p>\n<p>It all depends on what the stance on API-level support for pyDataverse is -- i.e., should every version in general just support whatever API was available at that time, or should it also support older API levels for some time.<br>\nIn the former case, yes, getting the DV_VERSION from the API is sensible -- or the asserts could even be removed or relaxed to be more like \"is a version present\".<br>\nHowever, this might also cause tests to fail without having an idea as to <em>why</em> they fail. In this case, I knew that if something unrelated would break, it might also be API-Version related. If the version would be selected from the API itself, I wouldn't know this.</p>\n<p>If the goal is to support differently versioned Dataverse instances, it would even be more difficult, but one could either select a version with DV_VERSION or auto-detect the API level using the API.</p>\n</blockquote>",
        "id": 452686447,
        "sender_full_name": "Sebastian HÃ¶ffner",
        "timestamp": 1721433429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"737658\">@Sebastian HÃ¶ffner</span> sure, this seems like a good place, thanks.</p>",
        "id": 452873711,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1721499322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598183\">Oliver Bertuch</span> <a href=\"#narrow/stream/377090-python/topic/API.20compatibility/near/425911070\">said</a>:</p>\n<blockquote>\n<p>The only breaking change I remember right now is the JSON problem with DV 5.9+</p>\n</blockquote>\n<p>We did finally document that breaking change:</p>\n<p>Explain that 5.6 introduced a breaking change to the create dataset API <a href=\"https://github.com/IQSS/dataverse/issues/10467\">#10467</a></p>",
        "id": 452873880,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1721499385
    }
]
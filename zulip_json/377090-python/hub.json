[
    {
        "content": "<p>In <a href=\"https://github.com/IQSS/dataverse-pm/issues/394\">https://github.com/IQSS/dataverse-pm/issues/394</a> we're talking about reporting on various metrics from <a href=\"https://hub.dataverse.org\">https://hub.dataverse.org</a></p>",
        "id": 510180560,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1743767782
    },
    {
        "content": "<ul>\n<li>Dataverse Installations: X (+/- Y March 2024 / March 2025) </li>\n<li>Dataverse Collections:  X (+/- Y March 2024 / March 2025) </li>\n<li>Datasets:  X (+/- Y March 2024 / March 2025) </li>\n<li>Total Files:  X (+/- Y March 2024 / March 2025) </li>\n<li>Total File Downloads:  X (+/- Y March 2024 / March 2025) </li>\n<li>Large data:  X (+/- Y March 2024 / March 2025)</li>\n</ul>",
        "id": 510180579,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1743767785
    },
    {
        "content": "<p>What if we add this functionality to pyDataverse? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 510180628,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1743767797
    },
    {
        "content": "<p>There's a nice OpenAPI endpoint: <a href=\"https://hub.dataverse.org/openapi\">https://hub.dataverse.org/openapi</a></p>",
        "id": 510180712,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1743767820
    },
    {
        "content": "<p>And Swagger: <a href=\"https://hub.dataverse.org/swagger-ui/index.html?url=/openapi\">https://hub.dataverse.org/swagger-ui/index.html?url=/openapi</a></p>",
        "id": 510180785,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1743767838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"599841\">@Jan Range</span> <span class=\"user-mention\" data-user-id=\"648750\">@Juan Pablo Tosca Villanueva</span> what do you think? <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 510180816,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1743767849
    },
    {
        "content": "<p>For now, for the number of installations, I make a draft PR as a recipe: <a href=\"https://github.com/gdcc/dataverse-recipes/pull/15\">https://github.com/gdcc/dataverse-recipes/pull/15</a></p>",
        "id": 510250646,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1743785894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"648750\">@Juan Pablo Tosca Villanueva</span> <span class=\"user-mention\" data-user-id=\"600327\">@Ceilyn Boyd</span> ^^</p>",
        "id": 510250661,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1743785901
    },
    {
        "content": "<p>Nice!! Sure, sounds great <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 510269183,
        "sender_full_name": "Jan Range",
        "timestamp": 1743792476
    },
    {
        "content": "<p>Would also put it in DVCLI :-P</p>",
        "id": 510269240,
        "sender_full_name": "Jan Range",
        "timestamp": 1743792485
    },
    {
        "content": "<p>I keep forgetting about dvcli!</p>",
        "id": 510269288,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1743792503
    },
    {
        "content": "<p>But I think <span class=\"user-mention\" data-user-id=\"600327\">@Ceilyn Boyd</span> would rather have it in Python than Rust.</p>",
        "id": 510269356,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1743792526
    },
    {
        "content": "<p>Ah alright, Python first then <span aria-label=\"muscle\" class=\"emoji emoji-1f4aa\" role=\"img\" title=\"muscle\">:muscle:</span></p>",
        "id": 510269456,
        "sender_full_name": "Jan Range",
        "timestamp": 1743792564
    },
    {
        "content": "<p>So, my real question is given <a href=\"https://hub.dataverse.org/openapi\">https://hub.dataverse.org/openapi</a> do you have some Pythonic way to generate some nice bindings?</p>",
        "id": 510269473,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1743792572
    },
    {
        "content": "<p>Can you open an issue at pyDataverse?</p>",
        "id": 510269480,
        "sender_full_name": "Jan Range",
        "timestamp": 1743792575
    },
    {
        "content": "<p>Yes, there are a couple of generators. I think there are also some that use pyDantic. I'll have a look at them</p>",
        "id": 510269656,
        "sender_full_name": "Jan Range",
        "timestamp": 1743792632
    },
    {
        "content": "<p>Sure! Done! <a href=\"https://github.com/gdcc/pyDataverse/issues/218\">https://github.com/gdcc/pyDataverse/issues/218</a></p>",
        "id": 510270135,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1743792810
    },
    {
        "content": "<p>Awesome! Thanks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 510270173,
        "sender_full_name": "Jan Range",
        "timestamp": 1743792826
    },
    {
        "content": "<p>We have two options available to utilize the OpenAPI specs in pyDataverse/Python:</p>\n<h3>1. Full Client Library Generation</h3>\n<p>The first option is a streamlined approach that generates both <strong>models and endpoints</strong>, resulting in a fully functional client library. There are various tools available, some open source, others partially proprietary, that support this. These tools often also generate documentation alongside the code.</p>\n<p><strong>Pros:</strong></p>\n<ul>\n<li>Fully automated generation</li>\n<li>Includes both code and documentation</li>\n<li>Convenient for standalone use</li>\n</ul>\n<p><strong>Cons:</strong></p>\n<ul>\n<li>Assumes generation of an entire client library</li>\n<li>Requires manual effort to integrate with the existing pyDataverse structure</li>\n</ul>\n<h3>2. Manual Endpoints with Generated Models</h3>\n<p>The second option is to generate only the <strong>models</strong>, for example using a Pydantic V2 generator, and implement the endpoints manually. This approach gives us more control and makes integration with pyDataverse smoother.</p>\n<p><strong>Pros:</strong></p>\n<ul>\n<li>Greater flexibility for integration</li>\n<li>Custom logic (e.g., date validation) can be added easily</li>\n<li>Lightweight and modular</li>\n<li>Easy to adapt to model changes via CI-based code generation</li>\n</ul>\n<p><strong>Cons:</strong></p>\n<ul>\n<li>Endpoints need to be maintained manually</li>\n<li>Slightly more hands-on work required</li>\n</ul>\n<p>Iâ€™m leaning toward this second option as it aligns better with the current pyDataverse codebase. Implementing an endpoint is relatively simple, it usually involves an HTTP call and some optional validation logic. As seen in the current <a href=\"https://github.com/gdcc/pyDataverse/blob/0489dbbe67bae95896b99772e78f70ccdf28ae41/pyDataverse/hub/hub.py#L54-L65\">PR</a>, it's just a few lines of mostly repetitive code. The biggest challenge, in my view, is setting up the models and this is well solved with the second approach.</p>\n<h2>A Hybrid Approach</h2>\n<p>Alongside the model generation, we could opt for a hybrid approach and generate the methods dynamically by the following approaches:</p>\n<ul>\n<li>Use <a href=\"https://jinja.palletsprojects.com/en/stable/\">Jinja templates</a> to generate endpoint code tailored to our needs</li>\n<li>Integrate a medium-sized LLM (e.g. via CI using Ollama) to assist with method generation</li>\n</ul>",
        "id": 511323851,
        "sender_full_name": "Jan Range",
        "timestamp": 1744266507
    },
    {
        "content": "<p>Thanks so much for working on this, <span class=\"user-mention\" data-user-id=\"599841\">@Jan Range</span>! <img alt=\":dataverse_man:\" class=\"emoji\" src=\"https://avatars.zulip.com/53090/emoji/images/c7b94a03.png\" title=\"dataverse man\"></p>",
        "id": 511392583,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1744287302
    },
    {
        "content": "<p>I see a lot of value in how Pydantic can generate the models automatically.</p>",
        "id": 511392666,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1744287327
    },
    {
        "content": "<p>In <a href=\"https://github.com/gdcc/pyDataverse/pull/219\">https://github.com/gdcc/pyDataverse/pull/219</a> you've already done this for us. You created <code>pyDataverse/hub/models.py</code>. But how was it done? That's the part I'm especially curious about.</p>",
        "id": 511393033,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1744287415
    },
    {
        "content": "<p>I initially implemented these models using Claude along with some manual work. However, this morning I tried out the <a href=\"https://docs.pydantic.dev/latest/integrations/datamodel_code_generator/\">Pydantic Data Model Generator</a>, and it works wellâ€”except for the <code>monthly</code> endpoint.</p>\n<p>The issue lies in the OpenAPI specification for <code>api/installation/metric/monthly</code>, which appears to be out of sync with the actual API response. Here's a breakdown:</p>\n<p><strong>OpenAPI Spec</strong></p>\n<p>The response is defined as including the installation <em>within</em> the metric, both on the same hierarchical level:</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"w\"> </span><span class=\"nt\">\"200\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nt\">\"description\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Registered installations metrics by month success\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nt\">\"content\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">              </span><span class=\"nt\">\"application/json\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"nt\">\"schema\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                  </span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"array\"</span><span class=\"p\">,</span>\n<span class=\"w\">                  </span><span class=\"nt\">\"items\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"nt\">\"$ref\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"#/components/schemas/InstallationMetrics\"</span>\n<span class=\"w\">                  </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"p\">},</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"nt\">\"InstallationMetrics\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"object\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nt\">\"description\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Dataverse installation metrics\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nt\">\"properties\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"nt\">\"installation\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nt\">\"$ref\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"#/components/schemas/Installation\"</span>\n<span class=\"w\">          </span><span class=\"p\">},</span>\n<span class=\"w\">          </span><span class=\"nt\">\"recordDate\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nt\">\"format\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"date-time\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nt\">\"description\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Date when the metrics were captured\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nt\">\"example\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"2024-10-31T20:13:03.422+00:00\"</span>\n<span class=\"w\">          </span><span class=\"p\">},</span>\n<span class=\"w\">          </span><span class=\"nt\">\"files\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"integer\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nt\">\"format\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"int64\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nt\">\"description\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Number of files in the Dataverse installation\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nt\">\"example\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">100000</span>\n<span class=\"w\">          </span><span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The actual response is the other way around. The <code>Installation</code> object contains the metrics within the <code>metrics</code> property. Here is an example output:</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nt\">\"dvHubId\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"DVN_JOHNS_HOPKINS_RESEARCH_DATA_REPOSITORY_2013\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nt\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Johns Hopkins Research Data Repository\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nt\">\"country\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"USA\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nt\">\"continent\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"North America\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nt\">\"launchYear\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2013</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nt\">\"metrics\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">            </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"nt\">\"recordDate\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"2025-03-14T09:04:19.638513\"</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"nt\">\"files\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">10449</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"nt\">\"downloads\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">68983</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"nt\">\"datasets\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">505</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"nt\">\"harvestedDatasets\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"nt\">\"localDatasets\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">505</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"nt\">\"dataverses\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">66</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n</code></pre></div>\n<p>Once this is fixed on the server side, the generated models will match the actual API response.  </p>\n<p>I already have a PR prepared that includes the CI for model generation and updated endpoints based on the new models.  </p>\n<p>As soon as the server-side fix is in place, we can open the PR on the repository and proceed with the merge.  <br>\nCurrently, the hub tests are failing because of this mismatch.</p>",
        "id": 511398977,
        "sender_full_name": "Jan Range",
        "timestamp": 1744288977
    },
    {
        "content": "<p>Interesting! Do you mind creating an issue about that at <a href=\"https://github.com/IQSS/dataverse-hub\">https://github.com/IQSS/dataverse-hub</a> ?</p>",
        "id": 511410537,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1744291678
    },
    {
        "content": "<p>Of course, will open an issue once back home <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 511412281,
        "sender_full_name": "Jan Range",
        "timestamp": 1744292054
    },
    {
        "content": "<p>Awesome. Thanks.</p>",
        "id": 511412765,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1744292153
    },
    {
        "content": "<p>Meanwhile, this seems to work fine!</p>\n<div class=\"codehilite\"><pre><span></span><code>datamodel-codegen --url https://hub.dataverse.org/openapi\n</code></pre></div>",
        "id": 511412830,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1744292163
    },
    {
        "content": "<p>I did have to install httpx as well.</p>\n<div class=\"codehilite\"><pre><span></span><code>% cat requirements.txt\ndatamodel-code-generator==0.28.5\nhttpx==0.28.1\n</code></pre></div>",
        "id": 511412935,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1744292187
    },
    {
        "content": "<p>Yes, it's pretty cool! Maybe we can also adapt it to the DV OpenAPI specs</p>",
        "id": 511413057,
        "sender_full_name": "Jan Range",
        "timestamp": 1744292216
    },
    {
        "content": "<p>Oh, sure. Sounds good.</p>",
        "id": 511413148,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1744292239
    },
    {
        "content": "<p>The hub is somewhat in flux. I'd like us to change /api/installation to /api/installations, for example. See <a href=\"https://github.com/IQSS/dataverse-hub/issues/21\">https://github.com/IQSS/dataverse-hub/issues/21</a></p>\n<p>(I'm curious if you think this would be an improvement, by the way.) <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 511414737,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1744292594
    },
    {
        "content": "<p>Using <code>installations</code> seems more logical and aligns with common design principles. Effectively, that's also what you get when calling the endpoint. So, it makes total sense to use the plural.</p>",
        "id": 511415539,
        "sender_full_name": "Jan Range",
        "timestamp": 1744292756
    },
    {
        "content": "<p>Great, I'm glad you agree. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 511415915,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1744292837
    },
    {
        "content": "<p>I also opened an issue about changing the dvHubId: <a href=\"https://github.com/IQSS/dataverse-hub/issues/15\">https://github.com/IQSS/dataverse-hub/issues/15</a></p>",
        "id": 511416015,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1744292858
    },
    {
        "content": "<p>I agree, the current ID approach has its flaws. I see that it is nice to read for humans, but when things change it might not be the most flexible.</p>\n<p>Have you thought of using geographic location as an identifier? Iâ€™ve recently learned about Google Plus Codes that encode longitude and latitude into a string. I guess the location wonâ€™t change, or what do you think?</p>",
        "id": 511431076,
        "sender_full_name": "Jan Range",
        "timestamp": 1744296338
    },
    {
        "content": "<p><a href=\"https://en.m.wikipedia.org/wiki/Open_Location_Code\">https://en.m.wikipedia.org/wiki/Open_Location_Code</a></p>",
        "id": 511431214,
        "sender_full_name": "Jan Range",
        "timestamp": 1744296371
    },
    {
        "content": "<p>nope, this is new to me</p>",
        "id": 511431318,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1744296399
    },
    {
        "content": "<p>Maybe we should ask about it in <a class=\"stream\" data-stream-id=\"376593\" href=\"/#narrow/channel/376593-geospatial\">#geospatial</a> <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 511431379,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1744296414
    },
    {
        "content": "<p>Here is a converter:</p>\n<p><a href=\"https://www.dcode.fr/open-location-code\">https://www.dcode.fr/open-location-code</a></p>",
        "id": 511432947,
        "sender_full_name": "Jan Range",
        "timestamp": 1744296770
    },
    {
        "content": "<p>Yeah, let's move this to <a class=\"stream-topic\" data-stream-id=\"376593\" href=\"/#narrow/channel/376593-geospatial/topic/Open.20Location.20Code/with/511435234\">#geospatial &gt; Open Location Code</a></p>",
        "id": 511434978,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1744297194
    },
    {
        "content": "<p>To summarize, Google Plus Codes might be problematic as a dvHubId because an org might host multiple installations of Dataverse (like DANS does). Also, while it's a remote possibility, an org could move physically.</p>",
        "id": 511660019,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1744380149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"599841\">@Jan Range</span> looking through old posts about OpenAPI I forgot you did some analysis already: <a class=\"stream-topic\" data-stream-id=\"377090\" href=\"/#narrow/channel/377090-python/topic/Analysis.20of.20OpenAPI.20code.20generators/with/419240738\">#python &gt; Analysis of OpenAPI code generators</a> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 511660162,
        "sender_full_name": "Philip Durbin ðŸš€",
        "timestamp": 1744380188
    }
]